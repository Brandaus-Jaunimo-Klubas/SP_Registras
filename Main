import javafx.application.Application;
import javafx.embed.swing.SwingFXUtils;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextField;
import javafx.scene.effect.BoxBlur;
import javafx.scene.effect.Effect;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.*;
import javafx.stage.Modality;
import javafx.stage.Stage;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Optional;

/**
 * Created by Mantas Visockis on 03/19/16.
 */

public class Main extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {

        primaryStage.setTitle("GKPN Registravimo sistema");

        //--------------------------------------------------
        //GridPane nustatymai, papildomi Scenes ir Stages
        GridPane gridNaujas = new GridPane();
        gridNaujas.setHgap(20);
        gridNaujas.setVgap(15);
        gridNaujas.setPadding(new Insets(10,0,10,10));

        GridPane gridApziura = new GridPane();
        gridApziura.setHgap(20);
        gridApziura.setVgap(15);
        gridApziura.setPadding(new Insets(10,0,10,10));

        GridPane gridPaieskaDialog = new GridPane();
        gridPaieskaDialog.setHgap(20);
        gridPaieskaDialog.setVgap(15);
        gridPaieskaDialog.setPadding(new Insets(10,0,10,10));

        Stage pacientoPaieska = new Stage();
        pacientoPaieska.setTitle("Paciento paieška");
        Scene dialoguScena = new Scene(gridPaieskaDialog,300,200);
        pacientoPaieska.setScene(dialoguScena);
        pacientoPaieska.setResizable(false);
        //--------------------------------------------------
        //Meniu nustatymai
        MenuBar menuBar = new MenuBar();

        Menu pacientas = new Menu("Pacientas");
        Menu statist = new Menu("Statistika");
        Menu dienyn = new Menu("Dienynas");

        Menu papild = new Menu("Papildyti");

        MenuItem uzreg = new MenuItem("Užregistruoti");
        MenuItem apziura = new MenuItem("Apžiūra");

        pacientas.getItems().addAll(uzreg, papild);
        papild.getItems().addAll(apziura);

        menuBar.getMenus().addAll(pacientas);
        menuBar.getMenus().addAll(statist);
        menuBar.getMenus().addAll(dienyn);
        //--------------------------------------------------
        //Kiti kelis kart naudojami elementai (metai)
         Calendar data_metai = Calendar.getInstance();
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy");
        String d1 = formatter.format(data_metai.getTime());
        int yea = Integer.parseInt(d1);
        //--------------------------------------------------
        //GridPane elementai
        //--------------------------------------------------
        //Paciento registravimas (gridNaujas)
         Label fikt1 = new Label("aaaaaaaaaaa");
        gridNaujas.add(fikt1,6,1);
        fikt1.setVisible(false);

        Label vardas = new Label("Vardas");
        gridNaujas.add(vardas,1,1);

        TextField var = new TextField();
        gridNaujas.add(var,2,1);

        Label pavarde = new Label("Pavardė");
        gridNaujas.add(pavarde,4,1);

        TextField pav = new TextField();
        gridNaujas.add(pav,5,1);

        Label kodas = new Label("Asmens kodas");
        gridNaujas.add(kodas,1,2);

        TextField kod = new TextField();
        gridNaujas.add(kod,2,2);

        Label amzius = new Label("Amžius");
        gridNaujas.add(amzius,1,3);

        TextField amz = new TextField();
        gridNaujas.add(amz,2,3);

        Label adresas = new Label("Adresas");
        gridNaujas.add(adresas,4,2);

        TextField adr = new TextField();
        gridNaujas.add(adr,5,2);

        Label telefonas = new Label("Telefonas");
        gridNaujas.add(telefonas,4,3);

        TextField tel = new TextField();
        gridNaujas.add(tel,5,3);

        Label gimimoData = new Label("Gimimo data");
        gridNaujas.add(gimimoData,1,4);
        ChoiceBox<Integer> gimMetai = new ChoiceBox<>();
        ChoiceBox<String> gimMen = new ChoiceBox<>();
        ChoiceBox<Integer> gimDien = new ChoiceBox<>();

        //Gimimo datos nustatymas
        for (int i = 0; i > -100; i--) {
            gimMetai.getItems().add(yea + i);
        }
        gridNaujas.add(gimMetai,2,4);

        gimMen.getItems().addAll("Sausis", "Vasaris", "Kovas", "Balandis", "Gegužė", "Birželis", "Liepa", "Rugpjūtis",
                "Rugsėjis", "Spalis", "Lapkritis", "Gruodis");
        gridNaujas.add(gimMen,3,4);
        gimMen.setTranslateX(-90);

        gridNaujas.add(gimDien,4,4);
        gimDien.setTranslateX(-155);

        gimMen.getSelectionModel().selectedIndexProperty().addListener((ov, value, new_value) -> {
            gimDien.getItems().clear();
            gridNaujas.getChildren().remove(gimDien);
            if (Arrays.asList(0, 2, 4, 6, 7, 9, 11).contains(new_value.intValue())) {
                gimDien.getItems().addAll(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31);
                gridNaujas.add(gimDien, 4, 4);
                gimDien.setTranslateX(-155);
            } else if (new_value.intValue() == 1) {
                gimDien.getItems().addAll(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28);
                gridNaujas.add(gimDien, 4, 4);
                gimDien.setTranslateX(-155);
            } else {
                gimDien.getItems().addAll(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30);
                gridNaujas.add(gimDien, 4, 4);
                gimDien.setTranslateX(-155);
            }
        });

        //Amziaus skaiciavimas is asmens kodo
        String[] code = new String[1];
        kod.textProperty().addListener((observable, oldValue, newValue) -> {
            code[0] = kod.getText();
            if (code[0].length() == 11) {
                String amziusString = koksAmzius(code,true);
                String gimDataString = koksAmzius(code,false);
                int amz_Int = Integer.parseInt(amziusString);
                amz.setText(Integer.toString(amz_Int));
                String[] gimData = new String[3];
                gimData = gimDataString.split(",");
                gimMetai.setValue(Integer.parseInt(gimData[0]));
                gimMen.setValue(menPavadinimas(Integer.parseInt(gimData[1])));
                gimDien.setValue(Integer.parseInt(gimData[2]));

                kod.setStyle("-fx-focus-color: green");
            }
            else {
                kod.setStyle("-fx-focus-color: red");
                amz.setText("");
            }
        });

        Label lytis = new Label("Lytis");
        gridNaujas.add(lytis,1,5);

        ChoiceBox<String> lyt = new ChoiceBox<>();
        lyt.getItems().addAll("Vyras", "Moteris");
        gridNaujas.add(lyt,2,5);

        Label profesija = new Label("Profesija");
        gridNaujas.add(profesija,4,4);

        TextField prof = new TextField();
        gridNaujas.add(prof,5,4);

        Label alkoholis = new Label("Alkoholis");
        gridNaujas.add(alkoholis,1,7);

        ChoiceBox<String> alko = new ChoiceBox<>();
        alko.getItems().addAll("Taip", "Ne");
        gridNaujas.add(alko,2,7);

        Label rukymas = new Label("Rūkymas");
        gridNaujas.add(rukymas,1,8);

        ChoiceBox<String> ruk = new ChoiceBox<>();
        ruk.getItems().addAll("Taip", "Ne");
        gridNaujas.add(ruk,2,8);

        TextField pakeliai = new TextField();
        TextField metai_ruk = new TextField();

        gridNaujas.add(pakeliai,3,8);
        pakeliai.setPromptText("Kiek pakelių per dieną");
        gridNaujas.add(metai_ruk,2,8);
        metai_ruk.setPromptText("Kiek metų rūko");
        pakeliai.setVisible(false);
        metai_ruk.setVisible(false);

        TextField metai_alko = new TextField();
        metai_alko.setPromptText("Kiek metų vartoja");
        gridNaujas.add(metai_alko,2,7);
        metai_alko.setVisible(false);

        metai_alko.setTranslateX(70);
        metai_ruk.setTranslateX(70);
        pakeliai.setTranslateX(65);

        alko.getSelectionModel().selectedIndexProperty().addListener((ov, value, new_value) -> {
            if (new_value.intValue() == 0) {
                metai_alko.setVisible(true);
            }

            if (new_value.intValue() == 1) {
                metai_alko.setVisible(false);
            }
        });

        //Rukymas (TAIP/NE) nustatymas
        ruk.getSelectionModel().selectedIndexProperty().addListener((ov, value, new_value) -> {
            if (new_value.intValue() == 0) {
                pakeliai.setVisible(true);
                metai_ruk.setVisible(true);
            }

            if (new_value.intValue() == 1) {
                pakeliai.setVisible(false);
                metai_ruk.setVisible(false);
            }
        });

        Label data = new Label("Pirmas apsilankymas");
        gridNaujas.add(data,1,9);

        ChoiceBox<Integer> me = new ChoiceBox<>();
        ChoiceBox<String> men = new ChoiceBox<>();
        ChoiceBox<Integer> dien = new ChoiceBox<>();

        //kreipimosi datos nustatymai
        me.getItems().addAll(yea + 1, yea, yea - 1, yea - 2 , yea - 3, yea - 4);
        gridNaujas.add(me,2,9);

        men.getItems().addAll("Sausis", "Vasaris", "Kovas", "Balandis", "Gegužė", "Birželis", "Liepa", "Rugpjūtis",
                "Rugsėjis", "Spalis", "Lapkritis", "Gruodis");
        gridNaujas.add(men,3,9);
        men.setTranslateX(-90);

        gridNaujas.add(dien,4,9);
        dien.setTranslateX(-155);

        men.getSelectionModel().selectedIndexProperty().addListener((ov, value, new_value) -> {
            dien.getItems().clear();
            gridNaujas.getChildren().remove(dien);
            if (Arrays.asList(0, 2, 4, 6, 7, 9, 11).contains(new_value.intValue())) {
                dien.getItems().addAll(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31);
                gridNaujas.add(dien, 4, 9);
                dien.setTranslateX(-155);
            } else if (new_value.intValue() == 1) {
                dien.getItems().addAll(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28);
                gridNaujas.add(dien, 4, 9);
                dien.setTranslateX(-155);
            } else {
                dien.getItems().addAll(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30);
                gridNaujas.add(dien, 4, 9);
                dien.setTranslateX(-155);
            }
        });

        //Sios dienos datos nustatymas
        Button siandien = new Button("Šiandien");
        gridNaujas.add(siandien,5,9);
        siandien.setTranslateX(-167);

        siandien.setOnAction((event) -> {
            Calendar date1 = Calendar.getInstance();
            SimpleDateFormat f1 = new SimpleDateFormat("yyyy");
            SimpleDateFormat f2 = new SimpleDateFormat("MM");
            SimpleDateFormat f3 = new SimpleDateFormat("dd");


            String da1 = f1.format(date1.getTime());
            String da2 = f2.format(date1.getTime());
            String da3 = f3.format(date1.getTime());

            me.setValue(Integer.parseInt(da1));
            men.setValue(menPavadinimas(Integer.parseInt(da2)));
            dien.setValue(Integer.parseInt(da3));
        });

        Button registruoti = new Button("Registruoti");
        gridNaujas.add(registruoti,5,20);
        registruoti.setStyle("-fx-font-size: 15px;");

        Button isvalyti = new Button("Išvalyti");
        gridNaujas.add(isvalyti,6,20);
        isvalyti.setTranslateX(-52);

        registruoti.setOnAction(event1 -> {
            if (kod.getText().trim().isEmpty()) {
                trukstaSkaiciu(primaryStage,false,0);
            }
            else if (!kod.getText().trim().isEmpty()) {
                if  (code[0].length() == 11) {
                    var.setText("");
                    pav.setText("");
                    kod.setText("");
                    amz.setText("");
                    adr.setText("");
                    tel.setText("");
                    prof.setText("");
                    metai_ruk.setText("");
                    pakeliai.setText("");
                    lyt.setValue(null);
                    alko.setValue(null);
                    dien.setValue(null);
                    men.setValue(null);
                    me.setValue(null);
                    ruk.setValue(null);

                    pakeliai.setVisible(false);
                    metai_ruk.setVisible(false);

                    Alert regis = new Alert(Alert.AlertType.INFORMATION);
                    regis.setTitle("Registracija");
                    Button ok_registr = (Button) regis.getDialogPane().lookupButton(ButtonType.OK);
                    ok_registr.setText("OK");
                    regis.setHeaderText("Pacientas sėkmingai įregistruotas");
                    regis.initModality(Modality.APPLICATION_MODAL);
                    regis.initOwner(primaryStage);
                    regis.showAndWait();
                    }
                else {
                    trukstaSkaiciu(primaryStage,true,code[0].length());
                }
            }
        });

        isvalyti.setOnAction(event1 -> {
            var.setText("");
            pav.setText("");
            kod.setText("");
            amz.setText("");
            adr.setText("");
            tel.setText("");
            prof.setText("");
            metai_ruk.setText("");
            pakeliai.setText("");
            lyt.setValue(null);
            alko.setValue(null);
            dien.setValue(null);
            men.setValue(null);
            me.setValue(null);
            ruk.setValue(null);

            pakeliai.setVisible(false);
            metai_ruk.setVisible(false);
        });
        //--------------------------------------------------
        //Paciento paieska dialogui (gridPaieskaDialog)
        Label ieskVard = new Label("Vardas");
        Label ieskPavard = new Label("Pavardė");
        Label ieskKodo = new Label("Asmens kodas");

        TextField ieskVar = new TextField();
        TextField ieskPav = new TextField();
        TextField ieskKod = new TextField();

        Button ieskoti = new Button("     Ieškoti     ");

        gridPaieskaDialog.add(ieskVard,1,1);
        gridPaieskaDialog.add(ieskPavard,1,2);
        gridPaieskaDialog.add(ieskKodo,1,3);

        gridPaieskaDialog.add(ieskVar,2,1);
        gridPaieskaDialog.add(ieskPav,2,2);
        gridPaieskaDialog.add(ieskKod,2,3);

        gridPaieskaDialog.add(ieskoti,2,5);
        ieskoti.setTranslateX(-17);

        String[] code1 = new String[1];
        ieskKod.textProperty().addListener((observable, oldValue, newValue) -> {
            code1[0] = ieskKod.getText();
            if (code1[0].length() == 11) {
                ieskKod.setStyle("-fx-focus-color: green");
            }
            else {
                ieskKod.setStyle("-fx-focus-color: red");
            }
        });

        ieskoti.setOnAction((event) -> {
            if (ieskKod.getText().trim().isEmpty()) {
                trukstaSkaiciu(pacientoPaieska,false,0);
            }
            else if (!ieskKod.getText().trim().isEmpty()) {
                if  (code1[0].length() == 11) {
                    pacientoPaieska.close();
                }
                else {
                    trukstaSkaiciu(primaryStage,true,code1[0].length());
                }
            }
        });
        //--------------------------------------------------
        //Paciento papildymas -> apziura (gridApziura)


        //Nepanaudoti JavaFX elementai
        /*Label mirtis = new Label("Mirtis");
        gridNaujas.add(mirtis,1,11);

        ChoiceBox<String> choiceMirtis = new ChoiceBox<>();
        choiceMirtis.getItems().addAll("Taip", "Ne");
        gridNaujas.add(choiceMirtis,2,11);

        choiceMirtis.getSelectionModel().selectedIndexProperty().addListener((ov, value, new_value) -> {

        });

        Label skundai = new Label("Skundai");
        gridNaujas.add(skundai,1,11);

        CheckBox uzkim = new CheckBox("Užkimimas");
        CheckBox skaus = new CheckBox("Skausmas");
        CheckBox disko = new CheckBox("Diskomfortas");
        CheckBox kosul = new CheckBox("Kosulys");
        CheckBox kita1 = new CheckBox("Kita");
        TextField kit1 = new TextField();
        gridNaujas.add(uzkim,2,11);
        gridNaujas.add(skaus,3,11);
        gridNaujas.add(disko,4,11);
        gridNaujas.add(kosul,5,11);
        kosul.setTranslateX(45);
        gridNaujas.add(kita1,2,12);
        gridNaujas.add(kit1,3,12);

        Label sritis = new Label("Sritis");
        gridNaujas.add(sritis,1,14);

        CheckBox ausis = new CheckBox("Ausis");
        CheckBox smilk = new CheckBox("Smilkinkaulis");
        CheckBox nosis = new CheckBox("Nosis");
        CheckBox sinus = new CheckBox("Sinusai");
        CheckBox nosiar = new CheckBox("Nosiaryklė");
        CheckBox burnar = new CheckBox("Burnaryklė");
        CheckBox liezuv = new CheckBox("Liežuvis");
        CheckBox burn_dugn = new CheckBox("Burnos dugnas");
        CheckBox hipofaring = new CheckBox("Hipofaringsas");
        CheckBox antgerk = new CheckBox("Antgerklis");
        CheckBox glotis = new CheckBox("Glotis");
        CheckBox supraglot = new CheckBox("Supraglotis");
        CheckBox subglot = new CheckBox("Subglotis");
        CheckBox oda = new CheckBox("Oda");
        CheckBox gleivine = new CheckBox("Gleivinė");
        CheckBox kita2 = new CheckBox("Kita");
        TextField kit2 = new TextField();
        gridNaujas.add(ausis,2,14);
        gridNaujas.add(smilk,3,14);
        gridNaujas.add(nosis,4,14);
        gridNaujas.add(sinus,5,14);
        sinus.setTranslateX(45);
        gridNaujas.add(nosiar,2,15);
        gridNaujas.add(burnar,3,15);
        gridNaujas.add(liezuv,4,15);
        gridNaujas.add(burn_dugn,5,15);
        burn_dugn.setTranslateX(45);
        gridNaujas.add(hipofaring,2,16);
        gridNaujas.add(antgerk,3,16);
        gridNaujas.add(glotis,4,16);
        gridNaujas.add(supraglot,5,16);
        supraglot.setTranslateX(45);
        gridNaujas.add(subglot,2,17);
        gridNaujas.add(oda,3,17);
        gridNaujas.add(gleivine,4,17);
        gridNaujas.add(kita2,2,18);
        gridNaujas.add(kit2,3,18);

        Label apziura = new Label("Apžiūra");
        gridNaujas.add(apziura,1,20);

        Label endo = new Label("Endoskopija");
        Label VLS = new Label("VLS");
        Label otosk = new Label("Otoskopija");
        Label faringo = new Label("Faringoskopija");
        TextField endosk = new TextField();
        TextField vls = new TextField();
        TextField otosko = new TextField();
        TextField faringosko = new TextField();
        gridNaujas.add(endo,2,20);
        gridNaujas.add(endosk,3,20,3,1);
        gridNaujas.add(VLS,2,21);
        gridNaujas.add(vls,3,21,3,1);
        gridNaujas.add(otosk,2,22);
        gridNaujas.add(otosko,3,22,3,1);
        gridNaujas.add(faringo,2,23);
        gridNaujas.add(faringosko,3,23,3,1);

        Label biopsija = new Label("Biopsija");
        ChoiceBox<String> bio = new ChoiceBox<>();
        gridNaujas.add(biopsija,1,28);
        bio.getItems().addAll("Taip","Ne");
        gridNaujas.add(bio,2,28);

        Label morfologija = new Label("Morfologija");
        gridNaujas.add(morfologija,1,25);
        CheckBox ploks = new CheckBox("Plokščialąst.");
        CheckBox aden = new CheckBox("Adenoma");
        CheckBox kita3 = new CheckBox("Kita");
        TextField kit3 = new TextField();
        gridNaujas.add(ploks,2,25);
        gridNaujas.add(aden,3,25);
        gridNaujas.add(kita3,2,26);
        gridNaujas.add(kit3,3,26);

        Label diferencijacija = new Label("Diferencijacija");
        ChoiceBox<String> dif = new ChoiceBox<>();
        gridNaujas.add(diferencijacija,3,28);
        dif.getItems().addAll("G1","G2","G3","G4");
        gridNaujas.add(dif,4,28);
        dif.setTranslateX(-40);

        Label stadija = new Label("Stadija");
        ChoiceBox<String> stad = new ChoiceBox<>();
        gridNaujas.add(stadija,5,28);
        stad.getItems().addAll("IA","IB","II","III","IVA","IVB");
        gridNaujas.add(stad,6,28);
        stad.setTranslateX(-65);

        Label diagnoze = new Label("Diagnozė");
        gridNaujas.add(diagnoze,1,29);
        ChoiceBox<String> diag = new ChoiceBox<>();
        gridNaujas.add(diag,2,29);

        Label MDK = new Label("MDK");
        gridNaujas.add(MDK,1,31);
        Label isvados = new Label("Išvados");
        Label planas = new Label("Gydymo planas");
        TextField isv = new TextField();
        TextField plan = new TextField();
        gridNaujas.add(isvados,2,31);
        gridNaujas.add(planas,2,32);
        gridNaujas.add(isv,3,31,3,1);
        gridNaujas.add(plan,3,32,3,1);

        Label gretutines = new Label("Gretutinės ligos turinčios\nįtakos gydymui");
        gridNaujas.add(gretutines,1,33);
        ChoiceBox<String> gret = new ChoiceBox<>();
        gret.getItems().addAll("Taip", "Ne");
        gridNaujas.add(gret,2,33);
        TextField gre = new TextField();

        gret.getSelectionModel().selectedIndexProperty().addListener((ov, value, new_value) -> {
            if (new_value.intValue() == 0) {
                gridNaujas.add(gre,3,33,3,1);
            }
            else {
                gridNaujas.getChildren().remove(gre);
            }

        });

        Label gydymas = new Label("Gydymas");
        gridNaujas.add(gydymas,1,34);
        CheckBox chir = new CheckBox("Chirurginis");
        CheckBox spind = new CheckBox("Spindulinis");
        CheckBox kaklo = new CheckBox("Kaklo L/M");
        CheckBox chemo = new CheckBox("Chemoterapija");
        CheckBox biolo = new CheckBox("Biologinė terapija");
        gridNaujas.add(chir,2,34);
        gridNaujas.add(spind,2,35);
        gridNaujas.add(kaklo,2,36);
        gridNaujas.add(chemo,2,37);
        gridNaujas.add(biolo,2,38);

        TextField chi = new TextField();
        gridNaujas.add(chi,3,34);
        chi.setPromptText("Gydymo metodas");
        chi.setVisible(false);

        TextField spi1 = new TextField();
        gridNaujas.add(spi1,3,35);
        spi1.setVisible(false);
        spi1.setPromptText("Gydymo metodas");
        TextField spi2 = new TextField();
        gridNaujas.add(spi2,4,35);
        spi2.setVisible(false);
        spi2.setPromptText("Grėjų Kiekis");
        TextField spi3 = new TextField();
        gridNaujas.add(spi3,5,35);
        spi3.setVisible(false);
        spi3.setPromptText("Frakcijos");
        TextField spi4 = new TextField();
        gridNaujas.add(spi4,6,35);
        spi4.setVisible(false);
        spi4.setPromptText("Laikotarpis");

        TextField kak1 = new TextField();
        gridNaujas.add(kak1,3,36);
        kak1.setVisible(false);
        kak1.setPromptText("Gydymo metodas");
        TextField kak2 = new TextField();
        gridNaujas.add(kak2,4,36);
        kak2.setVisible(false);
        kak2.setPromptText("Grėjų Kiekis");
        TextField kak3 = new TextField();
        gridNaujas.add(kak3,5,36);
        kak3.setVisible(false);
        kak3.setPromptText("Frakcijos");
        TextField kak4 = new TextField();
        gridNaujas.add(kak4,6,36);
        kak4.setVisible(false);
        kak4.setPromptText("Laikotarpis");

        TextField che1 = new TextField();
        gridNaujas.add(che1,3,37);
        che1.setVisible(false);
        che1.setPromptText("Vaistai");
        TextField che2 = new TextField();
        gridNaujas.add(che2,4,37);
        che2.setVisible(false);
        che2.setPromptText("Kiekis");
        TextField che3 = new TextField();
        gridNaujas.add(che3,5,37);
        che3.setVisible(false);
        che3.setPromptText("Laikotarpis");

        TextField biol1 = new TextField();
        gridNaujas.add(biol1,3,38);
        biol1.setVisible(false);
        biol1.setPromptText("Vaistai");
        TextField biol2 = new TextField();
        gridNaujas.add(biol2,4,38);
        biol2.setVisible(false);
        biol2.setPromptText("Kiekis");
        TextField biol3 = new TextField();
        gridNaujas.add(biol3,5,38);
        biol3.setVisible(false);
        biol3.setPromptText("Laikotarpis");

        //Chirurginis
        chir.selectedProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue == true) {
                chi.setVisible(true);
            }
            else {
                chi.setVisible(false);
            }
        });

        //Spindulinis
        spind.selectedProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue == true) {
                spi1.setVisible(true);
                spi2.setVisible(true);
                spi3.setVisible(true);
                spi4.setVisible(true);
            }
            else {
                spi1.setVisible(false);
                spi2.setVisible(false);
                spi3.setVisible(false);
                spi4.setVisible(false);
            }
        });

        //Kaklo L/M
        kaklo.selectedProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue == true) {
                kak1.setVisible(true);
                kak2.setVisible(true);
                kak3.setVisible(true);
                kak4.setVisible(true);
            }
            else {
                kak1.setVisible(false);
                kak2.setVisible(false);
                kak3.setVisible(false);
                kak4.setVisible(false);
            }
        });

        //Chemoterapija
        chemo.selectedProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue == true) {
                che1.setVisible(true);
                che2.setVisible(true);
                che3.setVisible(true);
            }
            else {
                che1.setVisible(false);
                che2.setVisible(false);
                che3.setVisible(false);
            }
        });

        //Biologine
        biolo.selectedProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue == true) {
                biol1.setVisible(true);
                biol2.setVisible(true);
                biol3.setVisible(true);
            }
            else {
                biol1.setVisible(false);
                biol2.setVisible(false);
                biol3.setVisible(false);
            }
        });

        Label rodikliai = new Label("Rodikliai");
        gridNaujas.add(rodikliai,1,39);

        CheckBox sird = new CheckBox("Širdies");
        gridNaujas.add(sird,2,39);
        CheckBox inkst = new CheckBox("Inkstų");
        gridNaujas.add(inkst,3,39);
        CheckBox kita = new CheckBox("Kita");
        gridNaujas.add(kita,4,39);

        TextField kit = new TextField();
        gridNaujas.add(kit,5,39);
        kit.setTranslateX(-90);

        Label KT = new Label("Kompiuterinė tamografija (KT)");
        gridNaujas.add(KT,1,41);

        ChoiceBox kt = new ChoiceBox();
        kt.getItems().addAll("Taip", "Ne");
        gridNaujas.add(kt,2,41);

        TextField kt_text = new TextField();
        kt_text.setPromptText("Įtrauktos sritys");
        gridNaujas.add(kt_text,3,41,2,1);
        kt_text.setVisible(false);

        Label MRT = new Label("MRT");
        gridNaujas.add(MRT,1,42);

        ChoiceBox mrt = new ChoiceBox();
        mrt.getItems().addAll("Taip", "Ne");
        gridNaujas.add(mrt,2,42);

        TextField mrt_text = new TextField();
        mrt_text.setPromptText("Įtrauktos sritys");
        gridNaujas.add(mrt_text,3,42,2,1);
        mrt_text.setVisible(false);

        Label Pet_KT = new Label("PET/KT");
        gridNaujas.add(Pet_KT,1,43);

        ChoiceBox pet = new ChoiceBox();
        pet.getItems().addAll("Taip", "Ne");
        gridNaujas.add(pet,2,43);

        TextField pet_text = new TextField();
        pet_text.setPromptText("Įtrauktos sritys");
        gridNaujas.add(pet_text,3,43,2,1);
        pet_text.setVisible(false);

        kt.getSelectionModel().selectedIndexProperty().addListener((ov, value, new_value) -> {
            if (new_value.intValue() == 0) {
                kt_text.setVisible(true);
            }
            else {
                kt_text.setVisible(false);
            }
        });

        mrt.getSelectionModel().selectedIndexProperty().addListener((ov, value, new_value) -> {
            if (new_value.intValue() == 0) {
                mrt_text.setVisible(true);
            }
            else {
                mrt_text.setVisible(false);
            }
        });

        pet.getSelectionModel().selectedIndexProperty().addListener((ov, value, new_value) -> {
            if (new_value.intValue() == 0) {
                pet_text.setVisible(true);
            }
            else {
                pet_text.setVisible(false);
            }
        });

        Label patologija = new Label("Kaklo L/M patologija");

        Label pato_grupe = new Label("Grupė");

        Label sarginis = new Label("Sarginis L/M");

        Label sarg_grupe = new Label("Grupė");

        Label teigiami = new Label("Teigiami");

        Label limfanodektomija = new Label("Limfanodektomija");

        Label limf_grupe = new Label("Grupė");

        Label komplikacijos = new Label("Komplikacijos");

        Label sekimas = new Label("Sekimo lapas");

        Label antrinis = new Label("Antrinis navikas");*/


        //Pagrindiniai Panes ir Scenes
        ScrollPane scroll = new ScrollPane();

        BorderPane border = new BorderPane();

        border.setTop(menuBar);

        Scene naujas = new Scene(scroll, 758, 600);
        Scene pagrindinis = new Scene(border, 758, 600);

        primaryStage.setScene(pagrindinis);
        //--------------------------------------------------
        //warningas metamas uzdarant programa esant neissaugotam darbui
        primaryStage.setOnCloseRequest(event -> {
            if (!var.getText().isEmpty() || !pav.getText().isEmpty() || !kod.getText().isEmpty()
                    || !adr.getText().isEmpty() || !amz.getText().isEmpty() || !tel.getText().isEmpty()
                    || !prof.getText().isEmpty() || !pakeliai.getText().isEmpty() || !metai_ruk.getText().isEmpty()) {
                Alert closeConfirmation = new Alert(Alert.AlertType.CONFIRMATION, "Neišsaugotas darbas bus prarastas");
                closeConfirmation.setTitle("Dėmesio");
                Button uzdaryti = (Button) closeConfirmation.getDialogPane().lookupButton(ButtonType.OK);
                Button atsaukti = (Button) closeConfirmation.getDialogPane().lookupButton(ButtonType.CANCEL);
                uzdaryti.setText("Uždaryti");
                atsaukti.setText("Atšaukti");
                closeConfirmation.setHeaderText("Ar tikrai norite uždaryti?");
                closeConfirmation.initModality(Modality.APPLICATION_MODAL);
                closeConfirmation.initOwner(primaryStage);

                Optional<ButtonType> closeResponse = closeConfirmation.showAndWait();
                if (!ButtonType.OK.equals(closeResponse.get())) {
                    event.consume();
                }
            }
        });
        //--------------------------------------------------
        //--------------------------------------------------
        //Jei pasirinkta paciento registracija
        uzreg.setOnAction((event) -> {
            border.setCenter(gridNaujas);
            scroll.setContent(border);
            primaryStage.setScene(naujas);
        });
        //--------------------------------------------------
        //Jei pasirinkta paciento papildymas -> apziura
        apziura.setOnAction((event) -> {
            pacientoPaieska.show();
        });
        //--------------------------------------------------
        //--------------------------------------------------
        //Scrollbar padidinimas/visi Pane nustatymai
        scroll.setStyle("-fx-font-size: 16px;");
        border.setStyle(/*"-fx-padding: 5;" +
                "-fx-border-style: solid inside;" +
                "-fx-border-width: 1;" +
                "-fx-border-insets: 5;" +
                "-fx-border-radius: 5;" +
                "-fx-border-color: black;" +*/
                "-fx-font-size: 11px;");
        //--------------------------------------------------
        //Lango rodymas
        primaryStage.setResizable(false);
        primaryStage.show();
    }

    //--------------------------------------------------
    //Ivairus metodai
    //--------------------------------------------------
    /**
     * suskaiciuoja zmogaus amziu ir gimimo data is asmens kodo
     * @param a - asmens kodas String[] formatu
     * @param b - nustatoma ar skaiciuosi amzius ar gimimo data
     * @return amzius arba gimimo data string formatu (gimimo data skiriama kableliais pvz 1995,03,11)
     */
    String koksAmzius(String[] a, boolean b) {

        Calendar data = Calendar.getInstance();
        String gimDien;

            SimpleDateFormat formatter = new SimpleDateFormat("yyMMdd");
            String d1 = formatter.format(data.getTime());

            String kodas = Arrays.toString(a);
            kodas = kodas.substring(2, kodas.length() - 5);

            int gimMetai = Integer.parseInt(kodas.substring(0, 2));
            int gimMenuo = Integer.parseInt(kodas.substring(2, 4));
            int gimDiena = Integer.parseInt(kodas.substring(4, 6));
            int metai = Integer.parseInt(d1.substring(0, 2));
            int menuo = Integer.parseInt(d1.substring(2, 4));
            int diena = Integer.parseInt(d1.substring(4, 6));

        if (b == true) {
            int amzius = metai - gimMetai;
            if (amzius < 0) {
                amzius = 100 + amzius;
            }

            if (gimMenuo > menuo) {
                amzius = amzius - 1;
            }

            if (gimMenuo == menuo && gimDiena > diena) {
                amzius = amzius - 1;

            }
            gimDien = Integer.toString(amzius);
        }
        else {
            if (gimMetai > metai) {
                gimDien = "19"+gimMetai+","+gimMenuo+","+gimDiena;
            }
            else {
                gimDien = "20"+gimMetai+","+gimMenuo+","+gimDiena;
            }
        }
        return gimDien;
    }

    /**
     * Ismeta warninga jei asmens kodas trumpesinis ar ilgesnis nei 11 skaitmenu
     * @param st - naudojamo stage pavadinimas
     * @param b - ar asmens kodas turi skaitmenu (ar kazkas buvo vesta i asmens kodo textfielda)
     * @param skaitm - asmens kodo ilgis
     */
    void trukstaSkaiciu(Stage st, boolean b, int skaitm) {

        Alert mazai_skaiciu = new Alert(Alert.AlertType.WARNING, "Asmens kodas turi susidaryti iš 11 skaičių");
        mazai_skaiciu.setTitle("Dėmesio");
        Button kodo_mazai = (Button) mazai_skaiciu.getDialogPane().lookupButton(ButtonType.OK);
        kodo_mazai.setText("OK");
        if (b == true && skaitm > 11){
            mazai_skaiciu.setHeaderText("Per daug skaičių");
        }
        else {
            mazai_skaiciu.setHeaderText("Per mažai skaičių");
        }
        mazai_skaiciu.initModality(Modality.APPLICATION_MODAL);
        mazai_skaiciu.initOwner(st);
        mazai_skaiciu.showAndWait();
    }

    /**
     * Randa menesio pavadinima is duoto skaiciaus
     * @param men - paduodamas menesio skaicius
     * @return menesio pavadinima String formatu
     */
    String menPavadinimas(int men) {

        String mene = "";
        switch (men) {
            case 1:
                mene = "Sausis";
                break;
            case 2:
                mene = "Vasaris";
                break;
            case 3:
                mene = "Kovas";
                break;
            case 4:
                mene = "Balandis";
                break;
            case 5:
                mene = "Gegužė";
                break;
            case 6:
                mene = "Birželis";
                break;
            case 7:
                mene = "Liepa";
                break;
            case 8:
                mene = "Rugpjūtis";
                break;
            case 9:
                mene = "Rugsėjis";
                break;
            case 10:
                mene = "Spalis";
                break;
            case 11:
                mene = "Lapkritis";
                break;
            case 12:
                mene = "Gruodis";
                break;
        }
        return mene;
    }
}
